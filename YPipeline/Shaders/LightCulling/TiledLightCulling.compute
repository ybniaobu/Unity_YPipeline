#pragma kernel TiledLightCulling

#define THREAD_NUM_X 16 // equal to per tile size
#define THREAD_NUM_Y 16

#include "../../ShaderLibrary/Core/YPipelineCSCore.hlsl"

TEXTURE2D(_CameraDepthTexture);
SAMPLER(sampler_PointClamp);

StructuredBuffer<float4> _LightsCullingInputInfos; // xyz: light position, w: light range

float4 _CameraBufferSize; // x: 1.0 / bufferSize.x, y: 1.0 / bufferSize.y, z: bufferSize.x, w: bufferSize.y
float4 _PunctualLightCount; // x: punctual light count, yzw: 暂无

float4 _TileParams; // xy: tileCountXY, zw: tileUVSizeXY
float4 _CameraNearPlaneLB; // xyz: near plane left bottom point position in view space
float4 _TileNearPlaneSize; // xy: tile near plane size in view/world space

RWStructuredBuffer<uint> _TilesLightIndicesBuffer;

groupshared uint tileMinDepthInt;
groupshared uint tileMaxDepthInt;
groupshared uint lightCountInTile;
groupshared uint lightIndicesInTile[MAX_PUNCTUAL_LIGHT_COUNT];

// ----------------------------------------------------------------------------------------------------
// Input
// ----------------------------------------------------------------------------------------------------

float3 GetPunctualLightPosition(uint lightIndex)    { return _LightsCullingInputInfos[lightIndex].xyz; }
float GetPunctualLightRange(uint lightIndex)        { return _LightsCullingInputInfos[lightIndex].w; }
float GetPunctualLightCount()                       { return _PunctualLightCount.x; }

// ----------------------------------------------------------------------------------------------------
// Intersect Test Referred Functions
// ----------------------------------------------------------------------------------------------------

void GetTileFrustumCorners(out float3 tileCorners[4], uint2 tileIndex, float3 cameraNearPlaneLB, float2 tileNearPlaneSize)
{
    tileCorners[0] = cameraNearPlaneLB + tileIndex.x * float3(tileNearPlaneSize.x, 0, 0) + tileIndex.y * float3(0, tileNearPlaneSize.y, 0);
    tileCorners[1] = tileCorners[0] + float3(0, tileNearPlaneSize.y, 0);
    tileCorners[2] = tileCorners[1] + float3(tileNearPlaneSize.x, 0, 0);
    tileCorners[3] = tileCorners[0] + float3(tileNearPlaneSize.x, 0, 0);
}

bool DepthIntersect(float3 lightPositionVS, float lightRange)
{
    float tileDepthMin = asfloat(tileMinDepthInt);
    float tileDepthMax = asfloat(tileMaxDepthInt);

    float lightDepthMin = -lightPositionVS.z - lightRange;
    float lightDepthMax = -lightPositionVS.z + lightRange;
    
    return lightDepthMin <= tileDepthMax && lightDepthMax >= tileDepthMin;
}

// ----------------------------------------------------------------------------------------------------
// Sphere-Frustum Intersect Test
// ----------------------------------------------------------------------------------------------------

bool SidePlanesIntersect(float3 p1, float3 p2, float3 lightPositionVS, float lightRange)
{
    float3 N = -normalize(cross(p1, p2));
    float distance = dot(N, lightPositionVS);
    return distance < lightRange;
}

bool SphereFrustumIntersectTest(uint lightIndex, uint2 tileIndex)
{
    UNITY_BRANCH
    if ((float) lightIndex >= GetPunctualLightCount())
    {
        return false;
    }
    else
    {
        float3 lightPositionVS = TransformWorldToView(GetPunctualLightPosition(lightIndex));
        float lightRange = GetPunctualLightRange(lightIndex);

        float3 tileCorners[4];
        GetTileFrustumCorners(tileCorners, tileIndex, _CameraNearPlaneLB.xyz, _TileNearPlaneSize.xy);

        bool sideIntersected0 = SidePlanesIntersect(tileCorners[0], tileCorners[1], lightPositionVS, lightRange);
        bool sideIntersected1 = SidePlanesIntersect(tileCorners[1], tileCorners[2], lightPositionVS, lightRange);
        bool sideIntersected2 = SidePlanesIntersect(tileCorners[2], tileCorners[3], lightPositionVS, lightRange);
        bool sideIntersected4 = SidePlanesIntersect(tileCorners[3], tileCorners[0], lightPositionVS, lightRange);
        return sideIntersected0 && sideIntersected1 && sideIntersected2 && sideIntersected4 && DepthIntersect(lightPositionVS, lightRange);
    }
}

// ----------------------------------------------------------------------------------------------------
// Cone Intersect Test
// From https://lxjk.github.io/2018/03/25/Improve-Tile-based-Light-Culling-with-Spherical-sliced-Cone.html#_spherical_sliced_cone_test
// ----------------------------------------------------------------------------------------------------

bool TileLightConeIntersect(float3 tileCorners[4], float3 lightPositionVS, float lightRange)
{
    float3 tileCenterVec = normalize(tileCorners[0] + tileCorners[1] + tileCorners[2] + tileCorners[3]);
    float tileCos = min(min(min(dot(tileCenterVec, normalize(tileCorners[0])), dot(tileCenterVec, normalize(tileCorners[1]))), dot(tileCenterVec, normalize(tileCorners[2]))), dot(tileCenterVec, normalize(tileCorners[3])));
    float tileSin = sqrt(1 - tileCos * tileCos);

    float lightDistSqr = dot(lightPositionVS, lightPositionVS);
    float lightDist = sqrt(lightDistSqr);
    float3 lightCenterVec = lightPositionVS / lightDist;
    float lightSin = clamp(lightRange / lightDist, 0.0, 1.0);
    float lightCos = sqrt(1 - lightSin * lightSin);
    
    float lightTileCos = dot(lightCenterVec, tileCenterVec);
    float sumCos = (lightRange > lightDist) ? -1.0 : (tileCos * lightCos - tileSin * lightSin);

    return lightTileCos >= sumCos;
}

bool ConeIntersectTest(uint lightIndex, uint2 tileIndex)
{
    UNITY_BRANCH
    if ((float) lightIndex >= GetPunctualLightCount())
    {
        return false;
    }
    else
    {
        float3 lightPositionVS = TransformWorldToView(GetPunctualLightPosition(lightIndex));
        float lightRange = GetPunctualLightRange(lightIndex);
        
        float3 tileCorners[4];
        GetTileFrustumCorners(tileCorners, tileIndex, _CameraNearPlaneLB.xyz, _TileNearPlaneSize.xy);

        return TileLightConeIntersect(tileCorners, lightPositionVS, lightRange) && DepthIntersect(lightPositionVS, lightRange);
    }
}

// ----------------------------------------------------------------------------------------------------
// Spherical-Sliced Cone Test
// Also From https://lxjk.github.io/2018/03/25/Improve-Tile-based-Light-Culling-with-Spherical-sliced-Cone.html#_spherical_sliced_cone_test
// ----------------------------------------------------------------------------------------------------

bool MinMaxDistanceIntersect(float3 tileCorners[4], float3 lightPositionVS, float lightRange)
{
    float3 tileCornerVec0 = normalize(tileCorners[0]);
    float3 tileCornerVec1 = normalize(tileCorners[1]);
    float3 tileCornerVec2 = normalize(tileCorners[2]);
    float3 tileCornerVec3 = normalize(tileCorners[3]);

    float3 tileCenterVec = normalize(tileCornerVec0 + tileCornerVec1 + tileCornerVec2 + tileCornerVec3);
    float tileCos = min(min(min(dot(tileCenterVec, tileCornerVec0), dot(tileCenterVec, tileCornerVec1)), dot(tileCenterVec, tileCornerVec2)), dot(tileCenterVec, tileCornerVec3));
    float tileSin = sqrt(1 - tileCos * tileCos);

    float lightDistSqr = dot(lightPositionVS, lightPositionVS);
    float lightDist = sqrt(lightDistSqr);
    float3 lightCenterVec = lightPositionVS / lightDist;

    float lightTileCos = dot(lightCenterVec, tileCenterVec);
    float lightTileSin = sqrt(1 - lightTileCos * lightTileCos);

    float diffSin = clamp(lightTileSin * tileCos - lightTileCos * tileSin, 0.0, 1.0);
    float diffCos = (diffSin == 0.0) ? 1.0 : lightTileCos * tileCos + lightTileSin * tileSin;
    float lightTileDistOffset = sqrt(lightRange * lightRange - lightDistSqr * diffSin * diffSin);
    float lightTileDistBase = lightDist * diffCos;

    float tileDepthMin = asfloat(tileMinDepthInt);
    float tileDepthMax = asfloat(tileMaxDepthInt);
    float cosCornerMin = min(min(min(-tileCornerVec0.z, -tileCornerVec1.z), -tileCornerVec2.z), -tileCornerVec3.z);
    float cosCornerMax = max(max(max(-tileCornerVec0.z, -tileCornerVec1.z), -tileCornerVec2.z), -tileCornerVec3.z);
    float tileDistMin = tileDepthMin / cosCornerMax;
    float tileDistMax = tileDepthMax / cosCornerMin;

    return lightTileDistBase - lightTileDistOffset < tileDistMax && lightTileDistBase + lightTileDistOffset > tileDistMin;
}

bool SphericalSlicedConeIntersectTest(uint lightIndex, uint2 tileIndex)
{
    UNITY_BRANCH
    if ((float) lightIndex >= GetPunctualLightCount())
    {
        return false;
    }
    else
    {
        float3 lightPositionVS = TransformWorldToView(GetPunctualLightPosition(lightIndex));
        float lightRange = GetPunctualLightRange(lightIndex);

        float3 tileCorners[4];
        GetTileFrustumCorners(tileCorners, tileIndex, _CameraNearPlaneLB.xyz, _TileNearPlaneSize.xy);

        return MinMaxDistanceIntersect(tileCorners,lightPositionVS, lightRange);
    }
}

// ----------------------------------------------------------------------------------------------------
// AABB Intersect Test
// ----------------------------------------------------------------------------------------------------

bool AABBIntersectTest(uint lightIndex, uint2 tileIndex)
{
    UNITY_BRANCH
    if ((float) lightIndex >= GetPunctualLightCount())
    {
        return false;
    }
    else
    {
        float3 lightPositionVS = TransformWorldToView(GetPunctualLightPosition(lightIndex));
        lightPositionVS.z = -lightPositionVS.z;
        float lightRange = GetPunctualLightRange(lightIndex);
        
        float tileDepthMin = asfloat(tileMinDepthInt);
        float tileDepthMax = asfloat(tileMaxDepthInt);
        float lightDepthMin = lightPositionVS.z - lightRange;
        float lightDepthMax = lightPositionVS.z + lightRange;
        float minZ = max(tileDepthMin, lightDepthMin);
        float maxZ = min(tileDepthMax, lightDepthMax);
        float nearPlaneScale = minZ / _ProjectionParams.y;
        float farPlaneScale = maxZ / _ProjectionParams.y;
        
        float2 tileCorner0 = _CameraNearPlaneLB.xy + float2(tileIndex.x * _TileNearPlaneSize.x, tileIndex.y * _TileNearPlaneSize.y);
        float2 tileCorner2 = tileCorner0 + float2(_TileNearPlaneSize.x, _TileNearPlaneSize.y);
        
        float3 tileMin = float3(min(tileCorner0 * nearPlaneScale, tileCorner0 * farPlaneScale), minZ);
        float3 tileMax = float3(max(tileCorner2 * nearPlaneScale, tileCorner2 * farPlaneScale), maxZ);

        float3 closestPoint = clamp(lightPositionVS, tileMin, tileMax);
        float3 diff = closestPoint - lightPositionVS;
        float sqrDiff = dot(diff, diff);
        float sqrLightRange = lightRange * lightRange;
        return sqrDiff <= sqrLightRange && lightDepthMin <= tileDepthMax && lightDepthMax >= tileDepthMin;
    }
}

// ----------------------------------------------------------------------------------------------------
// Kernel
// ----------------------------------------------------------------------------------------------------

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void TiledLightCulling(uint3 id : SV_DispatchThreadID, uint3 groupThreadId : SV_GroupThreadID, uint3 groupId : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    // initialize shared memory
    if (groupIndex == 0)
    {
        tileMinDepthInt = 0x7f7fffff;
        tileMaxDepthInt = 0;
        lightCountInTile = 0;
    }

    GroupMemoryBarrierWithGroupSync();

    // get the minimum and maximum depth of the tile
    bool inScreen = (int) id.x < _CameraBufferSize.z && (int) id.y < _CameraBufferSize.w;

    if (inScreen)
    {
        float depth = LOAD_TEXTURE2D_LOD(_CameraDepthTexture, id.xy, 0).r;
        float linearDepth = GetViewDepthFromDepthTexture(depth);
        uint z = asuint(linearDepth);
        InterlockedMin(tileMinDepthInt, z);
        InterlockedMax(tileMaxDepthInt, z);
    }

    GroupMemoryBarrierWithGroupSync();
    
    // intersect test
    // if (SphereFrustumIntersectTest(groupIndex, groupId.xy))
    // if (ConeIntersectTest(groupIndex, groupId.xy))
    if (AABBIntersectTest(groupIndex, groupId.xy))
    // if (SphericalSlicedConeIntersectTest(groupIndex, groupId.xy))
    {
        uint offset;
        InterlockedAdd(lightCountInTile, 1, offset);
        lightIndicesInTile[offset] = groupIndex;
    }
    
    GroupMemoryBarrierWithGroupSync();

    // recording light indices
    uint headerIndex = (groupId.y * _TileParams.x + groupId.x) * (MAX_LIGHT_COUNT_PER_TILE + 1);
    uint minLightCount = min(lightCountInTile, MAX_LIGHT_COUNT_PER_TILE);

    UNITY_BRANCH
    if (groupIndex == 0)
    {
        _TilesLightIndicesBuffer[headerIndex] = lightCountInTile;
    }
    else
    {
        if (groupIndex - 1 < minLightCount) _TilesLightIndicesBuffer[headerIndex + groupIndex] = lightIndicesInTile[groupIndex - 1];
    }
}