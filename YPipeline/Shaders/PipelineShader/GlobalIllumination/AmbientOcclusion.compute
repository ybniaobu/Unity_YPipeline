#pragma kernel SSAOKernel
#pragma kernel GaussianBlurHorizontalKernel
#pragma kernel GaussianBlurVerticalKernel

#define THREAD_NUM_X 8
#define THREAD_NUM_Y 8

#include "../../../ShaderLibrary/Core/YPipelineCSCore.hlsl"
#include "../../../ShaderLibrary/RandomLibrary.hlsl"
#include "../../../ShaderLibrary/SamplingLibrary.hlsl"
#include "../../../ShaderLibrary/EncodingLibrary.hlsl"

RWTexture2D<float> _OutputTexture;
Texture2D<float> _InputTexture;

TEXTURE2D(_ThinGBufferTexture);
TEXTURE2D(_CameraDepthTexture);
TEXTURE2D(_BlueNoise64);
float4 _BlueNoise64_TexelSize;
SAMPLER(sampler_LinearClamp);
SAMPLER(sampler_PointClamp);

float4 _CameraBufferSize; // x: 1.0 / bufferSize.x, y: 1.0 / bufferSize.y, z: bufferSize.x, w: bufferSize.y
float4 _Jitter; // Halton (0, 1), xy: 1.0 / jitter, zw: jitter

float4 _TextureSize; // x: 1.0 / width, y: 1.0 / height, z: width, w: height

// SSAO - x: intensity, y: sample count, z: radius, w: reflection rate
// HBAO - x: , y: , z: , w:
// GTAO - x: , y: , z: , w: 
float4 _AmbientOcclusionParams;

// ----------------------------------------------------------------------------------------------------
// Input
// ----------------------------------------------------------------------------------------------------

float GetSSAOIntensity()        { return _AmbientOcclusionParams.x; }
float GetSSAOSampleCount()      { return _AmbientOcclusionParams.y; }
float GetSSAORadius()           { return _AmbientOcclusionParams.z; }
float GetSSAOReflectionRate()      { return _AmbientOcclusionParams.w; }

// ----------------------------------------------------------------------------------------------------
// AO Kernels
// ----------------------------------------------------------------------------------------------------

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void SSAOKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;

    float2 screenUV = (float2(id.xy) + float2(0.5, 0.5)) * _TextureSize.xy;
    
    // ------------------------- Get Depth -------------------------
    
    float originDepth = SAMPLE_TEXTURE2D_LOD(_CameraDepthTexture, sampler_LinearClamp, screenUV, 0).r;
    float4 originNDC = GetNDCFromUVAndDepth(screenUV, originDepth);
    float3 originWS = TransformNDCToWorld(originNDC, UNITY_MATRIX_I_VP);

    // ------------------------- Get Normal & Build Left-Handed TBN -------------------------

    // float3 packNormalWS = LOAD_TEXTURE2D_LOD(_ThinGBufferTexture, id.xy * _TextureSize.xy * _CameraBufferSize.zw, 0).rgb;
    float3 packNormalWS = SAMPLE_TEXTURE2D_LOD(_ThinGBufferTexture, sampler_PointClamp, screenUV, 0).rgb;
    float3 normalWS = normalize(DecodeNormalFrom888(packNormalWS)); // N

    float3 up = abs(normalWS.y) > 0.99999 ? float3(0, 0, 1) : float3(0, 1, 0);
    float3 tangent = normalize(cross(up, normalWS)); // T
    float3 binormal = normalize(cross(tangent, normalWS)); // B

    // ------------------------- Generate Normal-Oriented Hemisphere Samples -------------------------

    // TODO: Temporal Filter
    float randomRadian = (LOAD_TEXTURE2D_LOD(_BlueNoise64, id.xy % _BlueNoise64_TexelSize.w, 0).r + _Jitter.w) * TWO_PI;
    float2x2 rotation = float2x2(cos(randomRadian), -sin(randomRadian), sin(randomRadian), cos(randomRadian));

    float aoFactor = 0.0;
    float intensity = GetSSAOIntensity();
    float sampleCount = GetSSAOSampleCount();
    float radius = GetSSAORadius();

    UNITY_UNROLL
    for (int i = 0; i < sampleCount; i++)
    {
        float2 xi = k_Halton[i + 1];
        float3 dirTS = InverseSampleHemisphere(xi).xyz;
        float cosTheta = dirTS.y;
        float random = k_Sobol[i + 1].y;
        dirTS *= random * random;
        dirTS.xz = mul(rotation, dirTS.xz);

        float3 dirWS = tangent * dirTS.x + normalWS * dirTS.y + binormal * dirTS.z;
        float3 sampleWS = originWS + dirWS * radius;
        float4 sampleHCS = TransformWorldToHClip(sampleWS);
        sampleHCS.xyz /= sampleHCS.w;
        float2 uv = sampleHCS.xy * 0.5 + 0.5;

        #if UNITY_UV_STARTS_AT_TOP
        uv.y = 1.0f - uv.y;
        #endif
        
        float sampledDepth = SAMPLE_TEXTURE2D_LOD(_CameraDepthTexture, sampler_LinearClamp, uv, 0).r;
        float linearDepth = GetViewDepthFromDepthTexture(sampledDepth);
        
        bool rangeCheck = abs(sampleHCS.w - linearDepth) < radius;
        float occlusion = (linearDepth < sampleHCS.w) * rangeCheck * intensity;
        aoFactor += (1 - occlusion) * cosTheta;
    }

    aoFactor = saturate(2.0 * aoFactor / sampleCount);
    aoFactor = aoFactor * rcp(1 - GetSSAOReflectionRate() * (1 - aoFactor));
    _OutputTexture[id.xy] = aoFactor;
}

// ----------------------------------------------------------------------------------------------------
// Gaussian Blur Kernels Related
// ----------------------------------------------------------------------------------------------------

// Kernel width 7 x 7
float GaussianBlur(Texture2D<float> tex, float2 screenUV, float2 offset)
{
    const int stepCount = 2;
    const float offsets[stepCount] = { 0.53805, 2.06278 };
    const float weights[stepCount] = { 0.44908, 0.05092 };
    float occlusion = 0.0;

    UNITY_UNROLL
    for (int i = 0; i < stepCount; i++)
    {
        float2 uvOffset = offsets[i] * offset;
        float sample = SAMPLE_TEXTURE2D_LOD(tex, sampler_LinearClamp, screenUV + uvOffset, 0).r
        + SAMPLE_TEXTURE2D_LOD(tex, sampler_LinearClamp, screenUV - uvOffset, 0).r;
        occlusion += sample * weights[i];
    }
    return occlusion;
}

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void GaussianBlurHorizontalKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;
    
    float2 screenUV = (id.xy + float2(0.5, 0.5)) * _TextureSize.xy;
    float occlusion = GaussianBlur(_InputTexture, screenUV, float2(_TextureSize.x, 0));
    _OutputTexture[id.xy] = occlusion;
}

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void GaussianBlurVerticalKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;

    float2 screenUV = (id.xy + float2(0.5, 0.5)) * _TextureSize.xy;
    float occlusion = GaussianBlur(_InputTexture, screenUV, float2(0, _TextureSize.y));
    _OutputTexture[id.xy] = occlusion;
}