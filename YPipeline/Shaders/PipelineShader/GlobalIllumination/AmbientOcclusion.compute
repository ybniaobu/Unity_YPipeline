#pragma kernel SSAOKernel
#pragma kernel GTAOKernel
#pragma kernel DepthDownsampleKernel
#pragma kernel UpsampleKernel
#pragma kernel SpatialBlurHorizontalKernel
#pragma kernel SpatialBlurVerticalKernel
#pragma kernel TemporalBlurKernel

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma multi_compile _ _HALF_RESOLUTION

#include "../../../ShaderLibrary/Core/YPipelineCSCore.hlsl"
#include "../../../ShaderLibrary/RandomLibrary.hlsl"
#include "../../../ShaderLibrary/EncodingLibrary.hlsl"

// --- Local Textures ---
RWTexture2D<float2> _OutputTexture;
Texture2D<float2> _InputTexture;
Texture2D<float> _HalfDepthTexture;
Texture2D<float2> _AmbientOcclusionHistory;

// --- Global Textures & Samplers ---
TEXTURE2D(_ThinGBuffer);
TEXTURE2D(_CameraDepthTexture);
TEXTURE2D(_MotionVectorTexture);
TEXTURE2D(_BlueNoise64);
float4 _BlueNoise64_TexelSize;
SAMPLER(sampler_LinearClamp);
SAMPLER(sampler_PointClamp);

// --- Global Variables ---
float4 _CameraSettings; // x: vertical FOV in radian, y: cot(FOV/2)
float4 _CameraBufferSize; // x: 1.0 / bufferSize.x, y: 1.0 / bufferSize.y, z: bufferSize.x, w: bufferSize.y
float4 _Jitter; // Halton (-0.5, 0.5), xy: 1.0 / jitter, zw: jitter

// --- Local Variables ---
float4 _TextureSize; // x: 1.0 / width, y: 1.0 / height, z: width, w: height

// SSAO - x: intensity, y: sample count, z: radius
// HBAO - x: intensity, y: radius, z: direction count, w: step count
// GTAO - x: intensity, y: radius, z: direction count, w: step count
float4 _AmbientOcclusionParams;
float4 _AOSpatialBlurParams; // x: kernel radius, y: spatial sigma, z: depth/range sigma
float4 _AOTemporalBlurParams; // x: is temporal blur enabled (1 or 0), y: variance critical value

// --- Spatial Filter Groupshared Memory ---
#define MAX_FILTER_RADIUS 8
groupshared float2 _AOAndDepth[64 + 2 * MAX_FILTER_RADIUS];

// --- Temporal Filter Groupshared Memory ---
static const uint THREAD_NUM = 8;
static const uint TILE_BORDER = 1;
static const uint TILE_SIZE = THREAD_NUM + 2 * TILE_BORDER;
groupshared float2 _AOZ[TILE_SIZE * TILE_SIZE];

// ----------------------------------------------------------------------------------------------------
// Input
// ----------------------------------------------------------------------------------------------------

inline float GetSSAOIntensity()                 { return _AmbientOcclusionParams.x; }
inline float GetSSAOSampleCount()               { return _AmbientOcclusionParams.y; }
inline float GetSSAORadius()                    { return _AmbientOcclusionParams.z; }

inline float GetHBAOIntensity()                 { return _AmbientOcclusionParams.x; }
inline float GetHBAORadius()                    { return _AmbientOcclusionParams.y; }
inline float GetHBAODirectionCount()            { return _AmbientOcclusionParams.z; }
inline float GetHBAOStepCount()                 { return _AmbientOcclusionParams.w; }

inline float GetGTAOIntensity()                 { return _AmbientOcclusionParams.x; }
inline float GetGTAORadius()                    { return _AmbientOcclusionParams.y; }
inline float GetGTAODirectionCount()            { return _AmbientOcclusionParams.z; }
inline float GetGTAOStepCount()                 { return _AmbientOcclusionParams.w; }

inline float GetSpatialBlurKernelRadius()       { return _AOSpatialBlurParams.x; }
inline float2 GetSpatialBlurSigma()             { return _AOSpatialBlurParams.yz; }
inline float IsTemporalBlurEnabled()            { return _AOTemporalBlurParams.x; }
inline float GetTemporalVarianceCriticalValue() { return _AOTemporalBlurParams.y; }

#include "AmbientOcclusionDenoise.hlsl"

// ----------------------------------------------------------------------------------------------------
// SSAO Utility Functions
// ----------------------------------------------------------------------------------------------------

inline float LoadDepth(int2 pixelCoord)
{
    #ifdef _HALF_RESOLUTION
    return LOAD_TEXTURE2D_LOD(_HalfDepthTexture, pixelCoord, 0).r;
    #else
    return LOAD_TEXTURE2D_LOD(_CameraDepthTexture, pixelCoord, 0).r;
    #endif
}

inline float3 LoadAndDecodeNormal(int2 pixelCoord)
{
    #ifdef _HALF_RESOLUTION
    float3 packedNormalWS = LOAD_TEXTURE2D_LOD(_ThinGBuffer, pixelCoord * 2, 0).rgb;
    #else
    float3 packedNormalWS = LOAD_TEXTURE2D_LOD(_ThinGBuffer, pixelCoord, 0).rgb;
    #endif
    
    return DecodeNormalFrom888(packedNormalWS);
}

inline float3 FetchViewPosition(float2 screenUV, float rawDepth)
{
    float4 NDC = GetNDCFromUVAndDepth(screenUV, rawDepth);
    float3 VS = TransformNDCToView(NDC, UNITY_MATRIX_I_P);
    VS.z = -VS.z;
    return VS;
}

inline float3 FetchViewNormal(float3 normalWS)
{
    float3 normalVS = TransformWorldToViewNormal(normalWS, true);
    normalVS.z = -normalVS.z;
    return normalVS;
}

// ----------------------------------------------------------------------------------------------------
// SSAO Functions & Kernel
// ----------------------------------------------------------------------------------------------------

// Left-handed Spherical and Cartesian Coordinate, Coordinate Convention Detail see SamplingLibrary.hlsl

inline float3 GenerateHemisphereSamples(float2 xi, float scale)
{
    float phi = PI * (2.0 * xi.x - 1.0);
    float cosTheta = 1 - xi.y;
    float sinTheta = sqrt(1 - cosTheta * cosTheta);
    
    float r = scale * scale; // distribute more samples closer to the hemisphere origin
    return float3(r * sinTheta * cos(phi), r * cosTheta, r * sinTheta * sin(phi));
}

inline float3 GenerateCosineWeightedHemisphereSamples(float2 xi, float scale)
{
    float phi = PI * (2.0 * xi.x - 1.0);
    float cosTheta = sqrt(1 - xi.y);
    float sinTheta = sqrt(1 - cosTheta * cosTheta);
    
    float r = scale * scale; // distribute more samples closer to the hemisphere origin
    return float3(r * sinTheta * cos(phi), r * cosTheta, r * sinTheta * sin(phi));
}

[numthreads(8, 8, 1)]
void SSAOKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;

    float2 screenUV = (float2(id.xy) + float2(0.5, 0.5)) * _TextureSize.xy;
    
    // ------------------------- Get Origin Position -------------------------
    
    float originDepth = LoadDepth(id.xy);
    float originLinearDepth = GetViewDepthFromDepthTexture(originDepth);
    float4 originNDC = GetNDCFromUVAndDepth(screenUV, originDepth);
    float3 originWS = TransformNDCToWorld(originNDC, UNITY_MATRIX_I_VP);

    // ------------------------- Get Normal & Build Left-Handed TBN -------------------------
    
    float3 normalWS = LoadAndDecodeNormal(id.xy); // N

    float3 up = abs(normalWS.y) > 0.999 ? float3(0, 0, 1) : float3(0, 1, 0);
    float3 tangent = normalize(cross(up, normalWS)); // T
    float3 binormal = normalize(cross(tangent, normalWS)); // B

    // ------------------------- Random Rotation -------------------------
    
    float randomRadian = (LOAD_TEXTURE2D_LOD(_BlueNoise64, id.xy % _BlueNoise64_TexelSize.zw, 0).r + _Jitter.z * IsTemporalBlurEnabled()) * TWO_PI;
    float2x2 rotation = float2x2(cos(randomRadian), -sin(randomRadian), sin(randomRadian), cos(randomRadian));

    // ------------------------- SSAO Loop -------------------------
    
    float aoFactor = 0.0;
    float intensity = GetSSAOIntensity();
    float sampleCount = GetSSAOSampleCount();
    float radius = GetSSAORadius();

    UNITY_UNROLL
    for (int i = 0; i < sampleCount; i++)
    {
        // ------------------------- Generate Hemisphere Samples -------------------------
        
        float2 xi = k_Sobol[i + 1];
        float scale = max(k_Halton[i + 1].y + _Jitter.z * 0.01 * IsTemporalBlurEnabled(), 0.01);
        float3 dirTS = GenerateCosineWeightedHemisphereSamples(xi, scale);
        dirTS.xz = mul(rotation, dirTS.xz);

        // ------------------------- Sample Depth Buffer -------------------------
        
        float3 dirWS = tangent * dirTS.x + normalWS * dirTS.y + binormal * dirTS.z;
        float3 sampleWS = originWS + dirWS * radius;
        float4 sampleHCS = TransformWorldToHClip(sampleWS);
        sampleHCS.xyz /= sampleHCS.w;
        float2 uv = sampleHCS.xy * 0.5 + 0.5;

        #if UNITY_UV_STARTS_AT_TOP
        uv.y = 1.0f - uv.y;
        #endif

        int2 pixelCoord = clamp(uv * _TextureSize.zw, 0, _TextureSize.zw - 1);
        float sampledDepth = LoadDepth(pixelCoord);
        float linearDepth = GetViewDepthFromDepthTexture(sampledDepth);

        // ------------------------- Accumulate Occlusion Factor -------------------------
        
        bool rangeCheck = abs(sampleHCS.w - linearDepth) < radius;
        float occlusion = (linearDepth + 0.01 < sampleHCS.w) * rangeCheck * intensity;
        aoFactor += 1.0 - occlusion;
    }
    
    aoFactor = saturate(aoFactor / sampleCount);
    _OutputTexture[id.xy] = float2(aoFactor, originLinearDepth);
}

// ----------------------------------------------------------------------------------------------------
// GTAO Functions & Kernel
// ----------------------------------------------------------------------------------------------------

#include "../../../ShaderLibrary/GlobalIllumination/GTAO.hlsl"

[numthreads(8, 8, 1)]
void GTAOKernel(uint3 id : SV_DispatchThreadID)
{
    float2 screenUV = (float2(id.xy) + float2(0.5, 0.5)) * _TextureSize.xy;

    // ------------------------- Fetch Position & Normal -------------------------
    
    float rawDepth = LoadDepth(id.xy);
    float3 P = FetchViewPosition(screenUV, rawDepth);
    float3 viewDir = normalize(-P);

    float3 normalWS = LoadAndDecodeNormal(id.xy);
    float3 normalVS = FetchViewNormal(normalWS);
    
    float diameterInUV = GetHBAORadius() * _CameraSettings.y / P.z;
    float diameterInPixel = max(diameterInUV * _TextureSize.w, GTAO_NUM_STEPS);
    float stepSizeInPixel = diameterInPixel / GTAO_NUM_STEPS;

    float dirAngle = PI / GTAO_NUM_DIRECTIONS;
    float noise = LOAD_TEXTURE2D_LOD(_BlueNoise64, id.xy % _BlueNoise64_TexelSize.zw, 0).r;
    float randomRadian = (noise + _Jitter.w * IsTemporalBlurEnabled()) * TWO_PI;

    float ao = 0;
    
    UNITY_LOOP
    for (int d = 0; d < GTAO_NUM_DIRECTIONS; d++)
    {
        float angle = dirAngle * d + randomRadian;
        float3 dir = float3(cos(angle), sin(angle), 0);
        float2 pixelDelta = dir.xy * stepSizeInPixel;
        float2 cosH;
        float2 lastCosH = 1;

        UNITY_LOOP
        for (int s = 0; s < GTAO_NUM_STEPS; s++)
        {
            // ------------------------- Apply Random Offset -------------------------

            float rand = frac(k_Halton[d * GTAO_NUM_STEPS + s + 1].x + _Jitter.w * 0.01 * IsTemporalBlurEnabled());
            // float rand = (d * GTAO_NUM_STEPS + s + 1.0 + _Jitter.w * IsTemporalBlurEnabled()) / ( GTAO_NUM_STEPS * GTAO_NUM_DIRECTIONS + 1.0);
            float2 offset = (rand + s) * pixelDelta;
            float4 sampleCoord = clamp(id.xyxy + float4(offset, -offset), 0, _TextureSize.zwzw - 1);

            float4 sampleUV = (sampleCoord + 0.5) * _TextureSize.xyxy;
            float srDepth = LoadDepth(sampleCoord.xy);
            float slDepth = LoadDepth(sampleCoord.zw);
            float3 sr = FetchViewPosition(sampleUV.xy, srDepth) - P;
            float3 sl = FetchViewPosition(sampleUV.zw, slDepth) - P;
            float2 length2 = float2(dot(sr, sr), dot(sl, sl));

            float2 falloff = saturate(length2 / GetGTAORadius() / GetGTAORadius());
            cosH = float2(dot(sr, viewDir), dot(sl, viewDir)) * rsqrt(length2);
            cosH = min(cosH, lastCosH);
            // cosH = cosH < lastCosH ? lerp(cosH, lastCosH, falloff) : lastCosH;
            lastCosH = cosH;
        }

        float3 sliceNormal = normalize(cross(dir, viewDir));
        float3 sliceTangent = cross(viewDir, sliceNormal);
        float3 projectedNormal = normalVS - sliceNormal * dot(normalVS, sliceNormal);
        float projectedNormalLength = length(projectedNormal);

        float cosn = dot(normalize(projectedNormal), viewDir);
        float n = -sign(dot(projectedNormal, sliceTangent)) * acos(cosn);

        float2 H = acos(cosH);
        H.x = n + max(-H.x - n, -HALF_PI);
        H.y = n + min(H.y - n, HALF_PI);

        ao += projectedNormalLength * IntegrateArc_CosWeight(H, n);
    }

    ao = saturate(PositivePow(ao / GTAO_NUM_DIRECTIONS, GetGTAOIntensity()));
    _OutputTexture[id.xy] = float2(ao, P.z);
}

// ----------------------------------------------------------------------------------------------------
// HBAO Functions & Kernel (Deprecated 不推荐使用)
// Modified from: NVIDIA-Direct3D-SDK-11/SSAO11/NVSDK_D3D11_SSAO
// ----------------------------------------------------------------------------------------------------

#define HBAO_NUM_DIRECTIONS GetHBAODirectionCount()
#define HBAO_NUM_STEPS GetHBAOStepCount()

inline float Falloff(float d2, float r2)
{
    return saturate(1.0 - d2 * rcp(r2));
}

[numthreads(8, 8, 1)]
void HBAOKernel(uint3 id : SV_DispatchThreadID)
{
    float2 screenUV = (float2(id.xy) + float2(0.5, 0.5)) * _TextureSize.xy;

    // ------------------------- Fetch Position & Normal -------------------------
    
    float rawDepth = LoadDepth(id.xy);
    float3 P = FetchViewPosition(screenUV, rawDepth);
    float3 viewDir = normalize(-P);

    float3 normalWS = LoadAndDecodeNormal(id.xy);
    float3 normalVS = FetchViewNormal(normalWS);

    // ------------------------- Calculate Radius -------------------------

    float radiusInUV = 0.5 * GetHBAORadius() * _CameraSettings.y / P.z;
    float radiusInPixel = radiusInUV * _TextureSize.w;
    
    if (radiusInPixel < 1)
    {
        _OutputTexture[id.xy] = float2(1.0, P.z);
        return;
    }

    // ------------------------- Calculate Step Size -------------------------

    // Avoid oversampling if NUM_STEPS is greater than the kernel radius in pixels
    float numSteps = min(HBAO_NUM_STEPS, radiusInPixel);
    float stepSizeInPixel = radiusInPixel / numSteps;
    
    // ------------------------- HBAO Loop -------------------------
    
    float ao = 0;
    float dirAngle = TWO_PI / HBAO_NUM_DIRECTIONS;
    float noise = LOAD_TEXTURE2D_LOD(_BlueNoise64, id.xy % _BlueNoise64_TexelSize.zw, 0).r;
    float randomRadian = (noise + _Jitter.w * IsTemporalBlurEnabled()) * TWO_PI;

    UNITY_UNROLL
    for (int d = 0; d < HBAO_NUM_DIRECTIONS; ++d)
    {
        // ------------------------- Randomize Direction -------------------------
        
        float angle = dirAngle * d + randomRadian;
        float2 dir = float2(cos(angle), sin(angle));
        float2 pixelDelta = dir * stepSizeInPixel;

        // ------------------------- Apply Random Offset -------------------------
        
        float rand = (d + 1.0 + _Jitter.w * IsTemporalBlurEnabled()) / (HBAO_NUM_DIRECTIONS + 1.0);
        float2 sampleCoord = id.xy + rand * pixelDelta;

        // ------------------------- Calculate SinT -------------------------
        
        float3 sliceNormal = normalize(cross(float3(dir, 0), viewDir));
        float3 T = normalize(cross(normalVS, sliceNormal));
        float sinT = -T.z;
        float lastSinH = sinT;

        float r2 = GetHBAORadius() * GetHBAORadius();
        
        for (float j = 0; j < numSteps; ++j)
        {
            // ------------------------- Fetch Sample Position -------------------------
            
            sampleCoord = clamp(sampleCoord, 0, _TextureSize.zw - 1);
            float2 sampleUV = (sampleCoord + 0.5) * _TextureSize.xy;
            float sDepth = LoadDepth(sampleCoord);
            float3 S = FetchViewPosition(sampleUV, sDepth);
            float d2 = Length2(S - P);

            // ------------------------- Calculate SinH -------------------------
            
            float3 H = (S - P) * rsqrt(d2);
            float sinH = -H.z;

            // ------------------------- Per-Sample Attenuation -------------------------
            
            [branch]
            if (d2 < r2 && sinH > lastSinH)
            {
                ao += Falloff(d2, r2) * (sinH - lastSinH);
                lastSinH = sinH;
            }
        
            sampleCoord += pixelDelta;
        }
    }

    ao = saturate(1 - ao * rcp(HBAO_NUM_DIRECTIONS) * GetHBAOIntensity());
    _OutputTexture[id.xy] = float2(ao, P.z);
}