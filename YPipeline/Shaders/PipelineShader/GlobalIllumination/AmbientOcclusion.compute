#pragma kernel SSAOKernel
#pragma kernel SpatialBlurHorizontalKernel
#pragma kernel SpatialBlurVerticalKernel
#pragma kernel TemporalBlurKernel

#define THREAD_NUM_X 8
#define THREAD_NUM_Y 8

#include "../../../ShaderLibrary/Core/YPipelineCSCore.hlsl"
#include "../../../ShaderLibrary/RandomLibrary.hlsl"
#include "../../../ShaderLibrary/SamplingLibrary.hlsl"
#include "../../../ShaderLibrary/EncodingLibrary.hlsl"

RWTexture2D<float2> _OutputTexture;
Texture2D<float2> _InputTexture;
Texture2D<float2> _AmbientOcclusionHistory;

TEXTURE2D(_ThinGBuffer0);
TEXTURE2D(_CameraDepthTexture);
TEXTURE2D(_BlueNoise64);
float4 _BlueNoise64_TexelSize;
SAMPLER(sampler_LinearClamp);
SAMPLER(sampler_PointClamp);

float4 _CameraBufferSize; // x: 1.0 / bufferSize.x, y: 1.0 / bufferSize.y, z: bufferSize.x, w: bufferSize.y
float4 _Jitter; // Halton (-0.5, 0.5), xy: 1.0 / jitter, zw: jitter

float4 _TextureSize; // x: 1.0 / width, y: 1.0 / height, z: width, w: height

// SSAO - x: intensity, y: sample count, z: radius, w: reflection rate
// HBAO - x: , y: , z: , w:
// GTAO - x: , y: , z: , w: 
float4 _AmbientOcclusionParams;
float4 _AOBlurParams; // x: kernel radius, y: spatial sigma, z: depth/range sigma, w: temporal blend factor

// ----------------------------------------------------------------------------------------------------
// Input
// ----------------------------------------------------------------------------------------------------

inline float GetSSAOIntensity()             { return _AmbientOcclusionParams.x; }
inline float GetSSAOSampleCount()           { return _AmbientOcclusionParams.y; }
inline float GetSSAORadius()                { return _AmbientOcclusionParams.z; }
inline float GetSSAOReflectionRate()        { return _AmbientOcclusionParams.w; }
inline float GetSpatialBlurKernelRadius()   { return _AOBlurParams.x; }
inline float GetSpatialBlurSpatialSigma()   { return _AOBlurParams.y; }
inline float GetSpatialBlurDepthSigma()     { return _AOBlurParams.z; }

// ----------------------------------------------------------------------------------------------------
// AO Kernels
// ----------------------------------------------------------------------------------------------------

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void SSAOKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;

    float2 screenUV = (float2(id.xy) + float2(0.5, 0.5)) * _TextureSize.xy;
    
    // ------------------------- Get Depth -------------------------
    
    float originDepth = SAMPLE_TEXTURE2D_LOD(_CameraDepthTexture, sampler_LinearClamp, screenUV, 0).r;
    float4 originNDC = GetNDCFromUVAndDepth(screenUV, originDepth);
    float3 originWS = TransformNDCToWorld(originNDC, UNITY_MATRIX_I_VP);

    // ------------------------- Get Normal & Build Left-Handed TBN -------------------------
    
    float3 packNormalWS = SAMPLE_TEXTURE2D_LOD(_ThinGBuffer0, sampler_LinearClamp, screenUV, 0).rgb;
    float3 normalWS = normalize(packNormalWS * 2.0 - 1.0); // N

    float3 up = abs(normalWS.y) > 0.999999 ? float3(0, 0, 1) : float3(0, 1, 0);
    float3 tangent = normalize(cross(up, normalWS)); // T
    float3 binormal = normalize(cross(tangent, normalWS)); // B

    // ------------------------- Generate Normal-Oriented Hemisphere Samples -------------------------

    // TODO: Temporal Filter
    float randomRadian = (LOAD_TEXTURE2D_LOD(_BlueNoise64, id.xy % _BlueNoise64_TexelSize.w, 0).r + _Jitter.w) * TWO_PI;
    float2x2 rotation = float2x2(cos(randomRadian), -sin(randomRadian), sin(randomRadian), cos(randomRadian));

    float aoFactor = 0.0;
    float intensity = GetSSAOIntensity();
    float sampleCount = GetSSAOSampleCount();
    float radius = GetSSAORadius();

    UNITY_UNROLL
    for (int i = 0; i < sampleCount; i++)
    {
        float2 xi = k_Halton[i + 1];
        float3 dirTS = InverseSampleHemisphere(xi).xyz;
        float cosTheta = dirTS.y;
        float random = k_Sobol[i + 1].y + _Jitter.w / 10;
        dirTS *= random * random;
        dirTS.xz = mul(rotation, dirTS.xz);

        float3 dirWS = tangent * dirTS.x + normalWS * dirTS.y + binormal * dirTS.z;
        float3 sampleWS = originWS + dirWS * radius;
        float4 sampleHCS = TransformWorldToHClip(sampleWS);
        sampleHCS.xyz /= sampleHCS.w;
        float2 uv = sampleHCS.xy * 0.5 + 0.5;

        #if UNITY_UV_STARTS_AT_TOP
        uv.y = 1.0f - uv.y;
        #endif
        
        float sampledDepth = SAMPLE_TEXTURE2D_LOD(_CameraDepthTexture, sampler_LinearClamp, uv, 0).r;
        float linearDepth = GetViewDepthFromDepthTexture(sampledDepth);
        
        bool rangeCheck = abs(sampleHCS.w - linearDepth) < radius;
        float occlusion = (linearDepth < sampleHCS.w) * rangeCheck * intensity;
        aoFactor += (1 - occlusion) * cosTheta;
    }

    aoFactor = saturate(2.0 * aoFactor / sampleCount);
    aoFactor = aoFactor * rcp(1 - GetSSAOReflectionRate() * (1 - aoFactor));
    _OutputTexture[id.xy] = float2(aoFactor, originDepth);
}

// ----------------------------------------------------------------------------------------------------
// Spatial Filter - Bilateral Filter
// ----------------------------------------------------------------------------------------------------

inline float2 LoadAOandNormal(float2 pixelCoord, float2 offset)
{
    return LOAD_TEXTURE2D_LOD(_InputTexture, pixelCoord + offset, 0).rg;
}

inline float BilateralWeight(float radiusDelta, float depthDelta)
{
    float spatialSigma = GetSpatialBlurSpatialSigma();
    float depthSigma = GetSpatialBlurDepthSigma();
    float spatialFactor = radiusDelta * radiusDelta;
    float depthFactor = abs(depthDelta) * _ProjectionParams.z;
    float spatialWeight = exp((-spatialFactor) * rcp(2.0 * spatialSigma * spatialSigma));
    float depthWeight = exp((-depthFactor) * rcp(2.0 * depthSigma * depthSigma));
    return spatialWeight * depthWeight;
}

inline float2 BilateralBlur(float2 pixelCoord, float2 pixelOffset)
{
    int radius = int(GetSpatialBlurKernelRadius());
    float2 center = LoadAOandNormal(pixelCoord,0);
    float weightSum = BilateralWeight(0, 0);
    float aoFactor = center.r * weightSum;
    
    for (int i = -radius; i <= radius && i != 0; i++)
    {
        float2 sample = LoadAOandNormal(pixelCoord, i * pixelOffset);
        float weight = BilateralWeight(i, sample.g - center.g);
        aoFactor += sample.r * weight;
        weightSum += weight;
    }

    aoFactor /= weightSum;
    return float2(aoFactor, center.g);
}

// ----------------------------------------------------------------------------------------------------
// Temporal Filter
// ----------------------------------------------------------------------------------------------------

inline float2 TemporalBlur(float2 pixelCoord)
{
    float2 center = LoadAOandNormal(pixelCoord,0);
    float2 history = LOAD_TEXTURE2D_LOD(_AmbientOcclusionHistory, pixelCoord, 0);
    return lerp(center, history, 0.95);
}

// ----------------------------------------------------------------------------------------------------
// Filter Kernels
// ----------------------------------------------------------------------------------------------------

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void SpatialBlurHorizontalKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;
    _OutputTexture[id.xy] = BilateralBlur(id.xy, float2(1, 0));
}

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void SpatialBlurVerticalKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;
    _OutputTexture[id.xy] = BilateralBlur(id.xy, float2(0, 1));
}

[numthreads(THREAD_NUM_X, THREAD_NUM_Y, 1)]
void TemporalBlurKernel(uint3 id : SV_DispatchThreadID)
{
    bool inScreen = all(float2(id.xy) < _TextureSize.zw);
    if (!inScreen) return;
    _OutputTexture[id.xy] = TemporalBlur(id.xy);
}